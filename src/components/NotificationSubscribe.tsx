import { useState, useEffect } from 'react';
import Icon from '@/components/ui/icon';
import { Button } from '@/components/ui/button';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog';
import { Badge } from '@/components/ui/badge';
import { useToast } from '@/hooks/use-toast';

interface NotificationSubscribeProps {
  isOpen: boolean;
  onClose: () => void;
}

const NotificationSubscribe = ({ isOpen, onClose }: NotificationSubscribeProps) => {
  const [isSubscribed, setIsSubscribed] = useState(false);
  const [notificationPermission, setNotificationPermission] = useState<NotificationPermission>('default');
  const [selectedCategories, setSelectedCategories] = useState<string[]>(['–ù–æ–≤–æ—Å—Ç–∏', '–°–æ–±—ã—Ç–∏—è', '–ü—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏—è']);
  const { toast } = useToast();

  const categories = [
    { name: '–ù–æ–≤–æ—Å—Ç–∏', icon: 'Newspaper', color: 'bg-blue-500' },
    { name: '–°–æ–±—ã—Ç–∏—è', icon: 'Calendar', color: 'bg-purple-500' },
    { name: '–ü–æ–≥–æ–¥–∞', icon: 'CloudSun', color: 'bg-cyan-500' },
    { name: '–ü—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏—è', icon: 'AlertTriangle', color: 'bg-red-500' }
  ];

  useEffect(() => {
    if ('Notification' in window) {
      setNotificationPermission(Notification.permission);
      const subscription = localStorage.getItem('newsSubscription');
      if (subscription) {
        setIsSubscribed(true);
        setSelectedCategories(JSON.parse(subscription));
      }
    }
  }, []);

  const toggleCategory = (categoryName: string) => {
    if (selectedCategories.includes(categoryName)) {
      setSelectedCategories(selectedCategories.filter(c => c !== categoryName));
    } else {
      setSelectedCategories([...selectedCategories, categoryName]);
    }
  };

  const requestPermission = async () => {
    if (!('Notification' in window)) {
      toast({
        title: '–ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è',
        description: '–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
        variant: 'destructive'
      });
      return;
    }

    try {
      const permission = await Notification.requestPermission();
      setNotificationPermission(permission);

      if (permission === 'granted') {
        localStorage.setItem('newsSubscription', JSON.stringify(selectedCategories));
        setIsSubscribed(true);
        
        new Notification('–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! üéâ', {
          body: `–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ: ${selectedCategories.join(', ')}`,
          icon: '/favicon.svg',
          badge: '/favicon.svg',
          tag: 'subscription-success'
        });

        toast({
          title: '–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–Ω—ã!',
          description: `–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö`,
        });

        setTimeout(onClose, 2000);
      } else {
        toast({
          title: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω',
          description: '–†–∞–∑—Ä–µ—à–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞',
          variant: 'destructive'
        });
      }
    } catch (error) {
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',
        variant: 'destructive'
      });
    }
  };

  const unsubscribe = () => {
    localStorage.removeItem('newsSubscription');
    setIsSubscribed(false);
    toast({
      title: '–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞',
      description: '–í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'
    });
  };

  const sendTestNotification = () => {
    if (notificationPermission === 'granted') {
      new Notification('–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ üì∞', {
        body: '–•–∞–±–∞—Ä–æ–≤—Å–∫: –û—Ç–∫—Ä—ã—Ç–∏–µ –Ω–æ–≤–æ–≥–æ –º–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ –ê–º—É—Ä –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é',
        icon: '/favicon.svg',
        badge: '/favicon.svg',
        tag: 'test-notification'
      });
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-md">
        <DialogHeader>
          <div className="flex items-center gap-3 mb-2">
            <div className="bg-gradient-to-r from-primary to-red-600 p-2 rounded-lg">
              <Icon name="Bell" size={24} className="text-white" />
            </div>
            <DialogTitle className="font-montserrat text-2xl">Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</DialogTitle>
          </div>
          <DialogDescription>
            –ü–æ–ª—É—á–∞–π—Ç–µ –≤–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –•–∞–±–∞—Ä–æ–≤—Å–∫–∞ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –Ω–∞ –≤–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
          </DialogDescription>
        </DialogHeader>

        <div className="space-y-4 mt-4">
          {isSubscribed && (
            <div className="bg-green-50 border border-green-200 rounded-lg p-4 flex items-start gap-3">
              <Icon name="CheckCircle2" size={20} className="text-green-600 mt-0.5" />
              <div>
                <p className="font-semibold text-green-900 text-sm">–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞</p>
                <p className="text-xs text-green-700 mt-1">–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</p>
              </div>
            </div>
          )}

          <div>
            <h4 className="font-semibold mb-3 flex items-center gap-2">
              <Icon name="List" size={18} />
              –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            </h4>
            <div className="grid grid-cols-2 gap-2">
              {categories.map((category) => (
                <button
                  key={category.name}
                  onClick={() => toggleCategory(category.name)}
                  className={`p-3 rounded-lg border-2 transition-all ${
                    selectedCategories.includes(category.name)
                      ? 'border-primary bg-primary/10'
                      : 'border-gray-200 hover:border-gray-300'
                  }`}
                >
                  <div className="flex items-center gap-2">
                    <div className={`${category.color} p-1.5 rounded`}>
                      <Icon name={category.icon as any} size={16} className="text-white" />
                    </div>
                    <span className="text-sm font-medium">{category.name}</span>
                  </div>
                  {selectedCategories.includes(category.name) && (
                    <Icon name="Check" size={16} className="text-primary ml-auto mt-1" />
                  )}
                </button>
              ))}
            </div>
          </div>

          {selectedCategories.length === 0 && (
            <p className="text-sm text-amber-600 bg-amber-50 p-3 rounded-lg flex items-center gap-2">
              <Icon name="AlertCircle" size={16} />
              –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            </p>
          )}

          <div className="bg-gray-50 rounded-lg p-4 space-y-2">
            <div className="flex items-center gap-2 text-sm">
              <Icon name="Zap" size={16} className="text-primary" />
              <span>–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö</span>
            </div>
            <div className="flex items-center gap-2 text-sm">
              <Icon name="Volume2" size={16} className="text-primary" />
              <span>–ó–≤—É–∫–æ–≤—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è</span>
            </div>
            <div className="flex items-center gap-2 text-sm">
              <Icon name="Shield" size={16} className="text-primary" />
              <span>–ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏ –±–µ–∑ —Å–ø–∞–º–∞</span>
            </div>
          </div>

          <div className="flex gap-2">
            {!isSubscribed ? (
              <Button
                onClick={requestPermission}
                disabled={selectedCategories.length === 0}
                className="flex-1 bg-gradient-to-r from-primary to-red-600 hover:from-primary/90 hover:to-red-700"
              >
                <Icon name="Bell" size={18} className="mr-2" />
                –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
              </Button>
            ) : (
              <>
                <Button
                  onClick={sendTestNotification}
                  variant="outline"
                  className="flex-1"
                >
                  <Icon name="Send" size={18} className="mr-2" />
                  –¢–µ—Å—Ç
                </Button>
                <Button
                  onClick={unsubscribe}
                  variant="outline"
                  className="flex-1 text-red-600 border-red-200 hover:bg-red-50"
                >
                  <Icon name="BellOff" size={18} className="mr-2" />
                  –û—Ç–ø–∏—Å–∞—Ç—å—Å—è
                </Button>
              </>
            )}
          </div>

          {notificationPermission === 'denied' && (
            <div className="bg-red-50 border border-red-200 rounded-lg p-3">
              <p className="text-sm text-red-800 flex items-start gap-2">
                <Icon name="XCircle" size={16} className="mt-0.5" />
                <span>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –†–∞–∑—Ä–µ—à–∏—Ç–µ –∏—Ö –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞.</span>
              </p>
            </div>
          )}
        </div>
      </DialogContent>
    </Dialog>
  );
};

export default NotificationSubscribe;
